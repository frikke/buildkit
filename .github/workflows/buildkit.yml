name: buildkit

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  contents: read

on:
  schedule:
    - cron: '0 10 * * *'
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'v[0-9]+.[0-9]+'
    tags:
      - 'v*'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - 'frontend/dockerfile/docs/**'

env:
  GO_VERSION: "1.24"
  SETUP_BUILDX_VERSION: "edge"
  SETUP_BUILDKIT_IMAGE: "moby/buildkit:latest"
  SCOUT_VERSION: "1.13.0"
  IMAGE_NAME: "moby/buildkit"
  PLATFORMS: "linux/amd64,linux/arm/v7,linux/arm64,linux/s390x,linux/ppc64le,linux/riscv64"
  DESTDIR: "./bin"

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      platforms: ${{ steps.prep.outputs.platforms }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v5
      -
        name: Prepare
        id: prep
        run: |
          platforms=$(docker buildx bake release --print | jq -cr '.target."release".platforms')
          echo "platforms=$platforms" >>${GITHUB_OUTPUT}

  binaries:
    runs-on: ubuntu-24.04
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.platforms) }}
    steps:
      -
        name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      -
        name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.SETUP_BUILDX_VERSION }}
          driver-opts: image=${{ env.SETUP_BUILDKIT_IMAGE }}
          buildkitd-flags: --debug
      -
        name: Build
        run: |
          make release
        env:
          RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}
          PLATFORMS: ${{ matrix.platform }}
          CACHE_FROM: type=gha,scope=binaries-${{ env.PLATFORM_PAIR }}
          CACHE_TO: type=gha,scope=binaries-${{ env.PLATFORM_PAIR }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: buildkit-${{ env.PLATFORM_PAIR }}
          path: ${{ env.DESTDIR }}/*
          if-no-files-found: error
          retention-days: 1

  test:
    uses: ./.github/workflows/.test.yml
    secrets: inherit
    needs:
      - binaries
    with:
      cache_scope: build-integration-tests
      pkgs: ./client ./cmd/buildctl ./worker/containerd ./solver ./frontend
      kinds: integration
      codecov_flags: core
      includes: |
        - pkg: ./...
          skip-integration-tests: 1
          typ: integration gateway
        - pkg: ./client
          worker: containerd
          tags: nydus
          typ: integration
        - pkg: ./client
          worker: oci
          tags: nydus
          typ: integration
        - pkg: ./...
          tags: nydus
          skip-integration-tests: 1
          typ: integration
        - pkg: ./cache/remotecache/gha
          worker: oci
          typ: integration

  govulncheck:
    runs-on: ubuntu-24.04
    permissions:
      # same as global permission
      contents: read
      # required to write sarif report
      security-events: write
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.SETUP_BUILDX_VERSION }}
          driver-opts: image=${{ env.SETUP_BUILDKIT_IMAGE }}
          buildkitd-flags: --debug
      -
        name: Run
        uses: docker/bake-action@v6
        with:
          targets: govulncheck
        env:
          GOVULNCHECK_FORMAT: sarif
      -
        name: Upload SARIF report
        if: ${{ github.ref == 'refs/heads/master' && github.repository == 'moby/buildkit' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.DESTDIR }}/govulncheck.out

  image:
    runs-on: ubuntu-24.04
    needs:
      - test
    strategy:
      fail-fast: false
      matrix:
        target:
          - ''
          - rootless
    steps:
      -
        name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      -
        name: Prepare
        run: |
          if [ -n "${{ matrix.target }}" ]; then
            echo "TAG_SUFFIX=-${{ matrix.target }}" >> $GITHUB_ENV
          fi
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            if [[ "${GITHUB_REF#refs/tags/}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              if [ -n "${{ matrix.target }}" ]; then
                echo "TAG_LATEST=${{ matrix.target }}" >> $GITHUB_ENV
              else
                echo "TAG_LATEST=latest" >> $GITHUB_ENV
              fi
            fi
          fi
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: ${{ env.SETUP_BUILDX_VERSION }}
          driver-opts: image=${{ env.SETUP_BUILDKIT_IMAGE }}
          buildkitd-flags: --debug
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          # versioning strategy
          ## push semver tag v0.24.0
          ### moby/buildkit:v0.24.0
          ### moby/buildkit:latest
          ### moby/buildkit:v0.24.0-rootless
          ### moby/buildkit:rootless
          ## push semver prerelease tag v0.24.0-rc1
          ### moby/buildkit:v0.24.0-rc1
          ### moby/buildkit:v0.24.0-rc1-rootless
          ## push on master
          ### moby/buildkit:master
          ### moby/buildkit:master-rootless
          ## scheduled event on master
          ### moby/buildkit:nightly
          ### moby/buildkit:nightly-rootless
          tags: |
            type=schedule,pattern=nightly,suffix=${{ env.TAG_SUFFIX }}
            type=ref,event=branch,suffix=${{ env.TAG_SUFFIX }}
            type=ref,event=pr,suffix=${{ env.TAG_SUFFIX }}
            type=semver,pattern={{raw}},suffix=${{ env.TAG_SUFFIX }}
            type=raw,value=${{ env.TAG_LATEST }}
          flavor: |
            latest=false
          annotations: |
            org.opencontainers.image.title=BuildKit
            org.opencontainers.image.vendor=Moby
          bake-target: meta-helper
      -
        name: Login to DockerHub
        if: ${{ github.repository == 'moby/buildkit' && (github.event_name == 'schedule' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build
        uses: docker/bake-action@v6
        with:
          source: .
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file-tags }}
            ${{ steps.meta.outputs.bake-file-annotations }}
          targets: image-cross
          push: ${{ github.repository == 'moby/buildkit' && (github.event_name == 'schedule' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
          provenance: mode=max
          sbom: true
          set: |
            *.cache-from=type=gha,scope=image${{ matrix.target }}
            *.cache-to=type=gha,scope=image${{ matrix.target }}
            *.no-cache-filter=${{ (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) && 'buildkit-export,gobuild-base,rootless' || '' }}
        env:
          IMAGE_TARGET: ${{ matrix.target }}

  scout:
    runs-on: ubuntu-24.04
    if: ${{ github.ref == 'refs/heads/master' && github.repository == 'moby/buildkit' }}
    permissions:
      # same as global permission
      contents: read
      # required to write sarif report
      security-events: write
    needs:
      - image
    strategy:
      fail-fast: false
      matrix:
        tag:
          - master
          - master-rootless
    steps:
      -
        name: Checkout
        uses: actions/checkout@v5
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Scout
        id: scout
        uses: crazy-max/.github/.github/actions/docker-scout@ccae1c98f1237b5c19e4ef77ace44fa68b3bc7e4
        with:
          version: ${{ env.SCOUT_VERSION }}
          format: sarif
          image: registry://${{ env.IMAGE_NAME }}:${{ matrix.tag }}
      -
        name: Result output
        run: |
          jq . ${{ steps.scout.outputs.result-file }}
      -
        name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.scout.outputs.result-file }}

  release:
    runs-on: ubuntu-24.04
    permissions:
      # required to create GitHub release
      contents: write
    needs:
      - prepare
      - test
      - binaries
      - image
    steps:
      -
        name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: ${{ env.DESTDIR }}
          pattern: buildkit-*
          merge-multiple: true
      -
        name: List artifacts
        run: |
          tree -nh ${{ env.DESTDIR }}
      -
        name: GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8  # v2.3.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          files: ${{ env.DESTDIR }}/*
          name: ${{ needs.prepare.outputs.tag }}
